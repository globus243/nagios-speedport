#!/usr/bin/env python3

########################################################################
# check_speedport_connection - connect to a Speedport 3 in modem-mode and 
# loads and decrypts the status.json to provide a nagios understandable output
# if no warn or crit parameters are used, the script will only check for a DSL Link
########################################################################

import json
import sys
import argparse
import requests
from time import sleep
from Crypto.Cipher import AES

DEFAULT_HOSTNAME = ''
DEFAULT_PORT = 443
DEFAULT_KEY = 'cdc0cac1280b516e674f0057e4929bca84447cca8425007e33a88a5cf598a190'
STATUS_ROUTE = '/data/Status.json'

HTTP_TIMEOUT = 5
MAX_RETRIES = 3
RETRY_WAIT = 3

session = requests.Session()
session.verify = False
session.trust_env = False

MEASUREMENT_NAME = "smart4_vdsl_status"
REPORT_FIELDS = [ 'dsl_link_status', 'dsl_downstream', 'dsl_upstream', 'firmware_version' ]
# Fields are strings by default. Cast these to integers:
INTEGER_FIELDS = [ 'dsl_downstream', 'dsl_upstream' ]

def http_get_encrypted_json(encryptionKey, url, params={}):
    res = None

    for i in range(MAX_RETRIES+1):
        try:
            headers = { 'Accept': 'application/json' }
            response = requests.get(url, params=params, headers=headers, timeout=HTTP_TIMEOUT, verify=False)

            try:
                res = response.json()
            except ValueError:
                try:
                    decrypted = decrypt_response(encryptionKey, response.text)
                    res = json.loads(decrypted)
                except ValueError:
                    print("Decryption or JSON parsing failed")
                    continue

        except Exception as e:
            if i < MAX_RETRIES:
                sleep(RETRY_WAIT)
            else:
                print("Maximum number of retries exceeded, giving up")
            continue
        break

    return res

def decrypt_response(keyHex, data):
    # thanks to https://stackoverflow.com/a/69054338/1387396

    key = bytes.fromhex(keyHex)
    nonce = bytes.fromhex(keyHex)[:8]

    ciphertextTag = bytes.fromhex(data)
    ciphertext = ciphertextTag[:-16]
    tag = ciphertextTag[-16:]

    cipher = AES.new(key, AES.MODE_CCM, nonce)
    decrypted = cipher.decrypt_and_verify(ciphertext, tag)
    return decrypted.decode('utf-8')

def get_field(report, name):
    field = next((x for x in report if x['varid'] == name), None)
    if name in INTEGER_FIELDS:
        return int(field['varvalue'])
    return field['varvalue']

def get_vdsl_status(hostname, port, key):
    url = "http://%s:%i%s" % ( hostname, port, STATUS_ROUTE )
    report = http_get_encrypted_json(key, url)

    status = {}
    for field in REPORT_FIELDS:
        status[field] = get_field(report, field)

    return status

def print_nagios_text(status):
    print(status["nagios_result"], 
        "Download:",status["dsl_downstream"],"kbit/s",
        "Upload:",status["dsl_upstream"],"kbit/s",
        "| Download=%s;;; Upload=%i;;;"
         %( status["dsl_downstream"], status["dsl_upstream"] )) 

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--hostname", default=DEFAULT_HOSTNAME,
                        help="Specify hostname or IP address (defaults to %s)" % DEFAULT_HOSTNAME)
    parser.add_argument("--port", default=DEFAULT_PORT, type=int,
                        help="Specify port (defaults to %i" % DEFAULT_PORT)
    parser.add_argument("--key", default=DEFAULT_KEY,
                        help="Specify key for AES decryption (defaults to %s" % DEFAULT_KEY)
    parser.add_argument("--downloadWarn", type=int, default=0,
                        help="Download speed lower than this will return warning")
    parser.add_argument("--downloadCrit", type=int, default=0,
                        help="Download speed lower than this will return critical")
    parser.add_argument("--uploadWarn", type=int, default=0,
                        help="Upload speed lower than this will return warning")
    parser.add_argument("--uploadCrit", type=int, default=0,
                        help="Upload speed lower than this will return critical")

    params = parser.parse_args()

    status = get_vdsl_status(params.hostname, params.port, params.key)
    
    # if we are not online, at all, return Critcal
    if status["dsl_link_status"] != "online":
        status["nagios_result"] = "CRITICAL"
        print_nagios_text(status)
        sys.exit(2)

    # check download speed only when warn and crit params are defined
    if params.downloadWarn > 0 and params.downloadCrit > 0:
        
        # compare download speed to limits and return accordingly.
        down_speed = status["dsl_downstream"]
        if down_speed <= params.downloadCrit:
            status["nagios_result"] = "CRITICAL"
            print_nagios_text(status)
            sys.exit(2)

        if down_speed <= params.downloadWarn:
            status["nagios_result"] = "WARNING"
            print_nagios_text(status)
            sys.exit(1)

    # check upload speed only when warn and crit params are defined
    if params.uploadWarn > 0 and params.uploadCrit > 0:
        
        # compare upload speed to limits and return accordingly.
        up_speed = status["dsl_upstream"]
        if up_speed <= params.uploadCrit:
            status["nagios_result"] = "CRITICAL"
            print_nagios_text(status)
            sys.exit(2)

        if up_speed <= params.uploadWarn:
            status["nagios_result"] = "WARNING"
            print_nagios_text(status)
            sys.exit(1)
    
    status["nagios_result"] = "OK"
    print_nagios_text(status)
    sys.exit(0)


if __name__ == '__main__':
    main()